'use strict';

const debug = require('debug')('itavy:MQRouter');
const EventEmitter = require('events');
const { has, rejectWithError } = require('./Helpers');

/**
 * Class MQRouter
 */
class MQRouter {
  /**
   * @param {Object} connector mq connector
   * @param {Object} mqStructure mq structure message builder
   * @param {Object} serializer mq structure serializer
   * @param {String} name router identificator
   * @param {MQRequestsRoutingTable} requestsRoutingTable routing table for requests
   * @param {MQQueuesRoutingTable} queuesRoutingTable routing table for requests
   * @param {String} [queue=''] own queue on which the router will listen
   * @param {String} [topic=''] own topic on which the router will listen
   * @param {String} [exchange=''] exchange to bind the topic
   * @param {Function} [errorColector] function to be called when unknown messages are received
   * @param {Number} [defaultTTL=5] default ttl in seconds for messages or requests sent
   */
  constructor({
    connector,
    mqStructure,
    name,
    serializer,
    requestsRoutingTable,
    queuesRoutingTable,
    queue,
    topic,
    exchange,
    errorColector = () => null,
    defaultTTL = 5
  }) {
    this.connector = connector;
    this.mqStructure = mqStructure;

    this.serializer = serializer;
    this.mqrEvents = Reflect.construct(EventEmitter, []);
    this.sourceIdentifier = `${name}.MQRouter`;

    this.requestsRoutingTable = requestsRoutingTable;
    this.requestsRoutingTable.setMessagesTimeoutListener({
      emitter: this.mqrEvents
    });

    this.queuesRoutingTable = queuesRoutingTable;

    this.mqRequestIds = [];
    this.defaultTTL = defaultTTL * 1000;

    this.identification = {
      startTime: process.hrtime(),
      listen:    {
        queue,
        topic,
        exchange
      },
      name
    };

    this.returnDestination = {
      queue: topic || queue,
      exchange
    };

    this.mqrEvents.on('error', (...args) => {
      errorColector.apply(errorColector, args);
    });
  }

  /**
   * Send request over mq
   * @param {Buffer} message message to be sent
   * @param {Object} destination where to send the message
   * @param {Object} options options to send mq message
   * @returns {Promise} resolves when the message is received
   */
  sendRequest({
    message,
    destination,
    options = {}
  }) {
    return new Promise((resolve, reject) => {
      this.validateDestination()
        .then(() => this.buildRequest({
          message,
          destination
        }))
        .then(({ message: serializedMessage, id }) => this.requestsRoutingTable.register({
          options: {
            ttl: options.ttl || this.defaultTTL
          },
          serializedMessage,
          id,
          resolve,
          reject
        }))
        .then((serializedMessage) => {
          const mqRequest = Object.assign({}, destination, {
            message: serializedMessage,
            options: {
              ttl: options.ttl || this.defaultTTL
            }
          });

          return this.connector.sendMessage(mqRequest);
        })

        .catch(error => reject(error));
    })
      .catch((error) => {
        debug(`error sending request - ${error.message}`);
        return rejectWithError({
          name:   'MQ_ROUTER_SEND_REQUEST_ERROR',
          source: `${this.sourceIdentifier}.sendRequest`,
          cause:  error
        });
      });
  }

  /**
   * Subscribe to queue
   * @param {Promise} handler Promise to be called when it is received a message
   * @param {String} [queue=''] queue where to subscribe or '' for autogenerated
   * @param {String} [topic=''] topic to bind the queue or '' for none
   * @param {String} [exchange=''] exchange to be used for queue and topic or '' for default
   * @param {Object} [options={}] subscribe options
   * @returns {Promise} resolves on success subscribe
   * @public
   */
  subscribe({
    handler,
    queue = '',
    topic = '',
    exchange = '',
    options = {}
  }) {
    let saveIndex = null;
    this.queuesRoutingTable.register({
      handler,
      queue,
      exchange,
      topic
    })
      .then(({ index }) => {
        saveIndex = index;
        return this.connector.subscribe({
          consumer: this.consumeMessages,
          queue,
          topic,
          exchange,
          options
        })
          .then(({ queue: registeredQueue, consumerTag }) => this.queuesRoutingTable.update({
            queue: registeredQueue,
            index,
            consumerTag
          }))
          .then(({ queue: registeredQueue }) => Promise.resolve({
            queue: registeredQueue,
            topic,
            exchange
          }));
      })
      .catch((error) => {
        debug(`error subscribing - ${error.message}`);
        return this.queuesRoutingTable.unregister({ index: saveIndex })
          .then(() => rejectWithError({
            name:   'MQ_ROUTER_SUBSCRIBE',
            source: `${this.sourceIdentifier}.subscribe`,
            cause:  error
          }));
      });
  }
  /*
  routeMessage({ message, nack, queue }) {

  }
  */
  /**
   * internam consume
   * @param {Buffer} message mq message,
   * needs to be deserialized before sending to original consumer
   * @param {String} queue queue
   * @param {String} topic topic
   * @param {String} exchange exchange
   * @param {Promise} nack it will resolve on negative ack message
   * @returns {Promise} consume received message
   * @private
   */
  consumeMessages({
    message,
    queue,
    topic,
    exchange,
    nack
  }) {
    return this.serializer.unserialize(message)
      .then(unserializedMessage => this.routeMessage({
        message: unserializedMessage,
        nack,
        queue,
        topic,
        exchange
      }))
      .catch((error) => {
        debug(`Error consuming message - ${error.message}`);
        this.mqrEvents.emit('error', {
          error: {
            name:   'MQ_ROUTER_CONSUME_ERROR',
            source: `${this.sourceIdentifier}.consumeMessages`,
            cause:  error
          },
          message,
          queue,
          topic,
          exchange
        });
        return Promise.reject(error);
      });
  }

  /**
   * Create a message to be sent over MQ
   * @param {Buffer} message message to be sent
   * @param {String} [replyId=''] id of the request message
   * @param {String} [to=''] to who the message is addressed
   * @returns {Promise} resolves with serialized message and the id of th message
   * @private
   */
  buildRequest({ message, replyId = '', to = '' }) {
    return new Promise((resolve, reject) => {
      // @todo extend check for TypedArray's
      if (!(message instanceof Buffer)) {
        debug('message is not a buffer');
        return rejectWithError({
          name:   'MQ_ROUTER_BUILD_REQUEST_NO_BUFFER',
          source: `${this.sourceIdentifier}.buildRequest`
        }, reject);
      }
      const m = this.mqStructure({
        id:      this.getMessageId(),
        replyTo: replyId,
        replyOn: this.returnDestination,
        from:    this.identification.name,
        to,
        message
      });
      return this.serializer.serialize(m)
        .then((serializedMessage => resolve({
          message: serializedMessage,
          id:      m.id
        })));
    })
      .catch((error) => {
        debug(`error building request - ${error.message}`);
        return rejectWithError({
          name:   'MQ_ROUTER_BUILD_REQUEST_ERROR',
          source: `${this.sourceIdentifier}.buildRequest`,
          cause:  error
        });
      });
  }

  /**
   * Genereate unique message id for this router
   * @returns {String} unique message id
   * @private
   */
  getMessageId() {
    const diff = process.hrtime(this.identification.startTime);
    return `${this.identification.name}.${(diff[0] * 1e9) + diff[1]}`;
  }

  /**
   * Validate message destination
   * @param {Object} destination where to send the message
   * @returns {Promise} resolves on success
   * @private
   */
  validateDestination({ destination }) {
    if (has(destination, 'queue')) {
      if (destination.queue.length !== 0) {
        return Promise.resolve();
      }
    }
    return rejectWithError({
      name:   'MQ_ROUTER_VALIDATE_DESTINATION',
      source: `${this.sourceIdentifier}.validateDestination`
    });
  }
}

module.exports = {
  MQRouter
};
